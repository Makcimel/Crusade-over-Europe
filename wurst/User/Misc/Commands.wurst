package Commands
import Main

// Constants
// Commands
public let kFarDistance = 3000.0
public let kMedDistance = 2300.0

// String constants.
public let ksFar = "far"
public let ksMed = "med"
public let ksName = "name"
public let ksRenameCity = "rename"
public let ksAddModifier = "add_mod"
public let ksDebug = "непереводимоесочетаниебукв"

// Errs

public let kseNotYourCity = "The city you wanted to rename so eagerly doesn't belong to you!"


function action()
  string input = GetEventPlayerChatString()
  string array args
  string arg = "" // all args together after args[0]
  player pl = GetTriggerPlayer()

  var j = 0
  for i = 1 to input.length()
    let char = input.substring(i, i + 1)
    if j > 0 and i > args[0].length() + 1
      arg += char
    if char != " "
      args[j] += char
    else
      j++

  if args[0] == ksFar
    SetCameraFieldForPlayer(GetTriggerPlayer(), CAMERA_FIELD_TARGET_DISTANCE, kFarDistance, 0)
  else if args[0] == ksMed
    SetCameraFieldForPlayer(GetTriggerPlayer(), CAMERA_FIELD_TARGET_DISTANCE, kMedDistance, 0)
  else if (args[0] == ksName)
    SetPlayerName(GetTriggerPlayer(), arg)
  else if args[0] == ksRenameCity
    int city_id = player_stats[pl.getId()].getSelectedCityId()
    if city_id >= 0 and city_id < cityCount
      if cities[city_id].getCityUnit().getOwner() != pl
        noteToPlayer(kseNotYourCity, pl)
      else
        cities[city_id].changeCityName(arg)
  else if args[0] == ksAddModifier
    int city_id = player_stats[pl.getId()].getSelectedCityId()
    if not dbg_mode
      return
    if city_id >= 0 and city_id < cityCount
      switch args[1]
        case "massacred_pop"
          cities[city_id].addModifier(CityModifier.massacred_pop)
        case "recently_conquered"
          cities[city_id].addModifier(CityModifier.recently_conquered)
        case "recently_revolted"
          cities[city_id].addModifier(CityModifier.recently_revolted)
        case "more_trade_estabilished"
          cities[city_id].addModifier(CityModifier.more_trade_estabilished)
        case "on_fire"
          cities[city_id].addModifier(CityModifier.on_fire)
        case "plague_outburst"
          cities[city_id].addModifier(CityModifier.plague_outburst)
        case "population_boom"
          cities[city_id].addModifier(CityModifier.population_boom)
        case "prospering"
          cities[city_id].addModifier(CityModifier.prospering)
        case "sieged"
          cities[city_id].addModifier(CityModifier.sieged)
  else if args[0] == ksDebug
    dbg_mode = not dbg_mode
    dbg_msg = not dbg_msg
    enableDebugForPlayer(players[0])


function cond() returns bool
  return GetEventPlayerChatString().startsWith("-")

init
  let t = CreateTrigger()
    ..addCondition(Condition(function cond))
    ..addAction(function action)

  for i = 0 to PLAYER_SLOTS - 1
    t.registerPlayerChatEvent(players[i], "-", false)
