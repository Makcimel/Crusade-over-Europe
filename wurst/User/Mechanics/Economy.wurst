package Economy
// Manages Income, taxes, etc.
// Updates Multiboard's "Income" and "Upkeep"
import Main
import ClosureForGroups


// Income is given every:
// once per x seconds
public let kIncomeCountRate = 120.0

// Counted and show to the multiboard:
// very laggy
public let kIncomeCountToMultiboardRate = 10.0


int array gold_change
int array lumb_change


public function countIncomeForAll()
	for i = 0 to PLAYER_SLOTS - 1
		gold_change[i] = 0
		lumb_change[i] = 0

	let number_of_cities_per_iteration = ((cityCount - 1) / kIncomeCountToMultiboardRate).toInt()
	for i = 0 to number_of_cities_per_iteration
		doAfter(i * kIncomeCountToMultiboardRate) ->
			for j = i * number_of_cities_per_iteration to min(cityCount - 1, (i + 1) * number_of_cities_per_iteration - 1)
				int pl_id = cities[j].getCityUnit().getOwner().getId()
				if cities[j].getCityUnit().getOwner().isIngame()
					gold_change[pl_id] += cities[j].countTax()

	// Searching for ores
	for u_type_id in usOres
		forUnitsOfType("custom_" + u_type_id.toString()) u ->
			let pl_id = u.getOwner().getId()
			if players[pl_id].isIngame()
				gold_change[pl_id] += usIncomeOres.get(u_type_id)

init
	doPeriodically(kIncomeCountToMultiboardRate / 30) cbUPKEEP_SHOWING ->
		for i = 0 to PLAYER_SLOTS - 1
			if player_stats[i].isInGame()
				multiboards[i]
					..setItem(kMBUpkeep[0], kMBUpkeep[1], getStringColoredBasedOnSign(player_stats[i].getUpkeep()))


	doPeriodically(kIncomeCountToMultiboardRate) cbINCOME_MULTIBOARD ->
		countIncomeForAll()
		for i = 0 to PLAYER_SLOTS - 1
			if player_stats[i].isInGame()
				multiboards[i]
					..setItem(kMBIncome[0], kMBIncome[1], getStringColoredBasedOnSign(gold_change[i]))
					..setItem(kMBUpkeep[0], kMBUpkeep[1], getStringColoredBasedOnSign(player_stats[i].getUpkeep()))

	// Income to every player
	doPeriodically(kIncomeCountRate) cbINCOME ->
		for i = 0 to PLAYER_SLOTS - 1
			if player_stats[i].isInGame()
				let cur_gold = GetPlayerState(players[i], PLAYER_STATE_RESOURCE_GOLD)
				let cur_lumb = GetPlayerState(players[i], PLAYER_STATE_RESOURCE_LUMBER)
				SetPlayerState(players[i], PLAYER_STATE_RESOURCE_GOLD, cur_gold + gold_change[i] + player_stats[i].getUpkeep())
				SetPlayerState(players[i], PLAYER_STATE_RESOURCE_LUMBER, cur_lumb + lumb_change[i])