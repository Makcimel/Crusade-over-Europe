package Diplomacy
import Main
import MultiboardCityUpdate

let kChangeUnhappinessOnWar = 600

function action()
  let source = GetSpellAbilityUnit().getOwner()
  let target = GetSpellTargetUnit().getOwner()
  let source_s = source.getNameColored()
  let target_s = target.getNameColored()
  let source_id = GetPlayerId(source)
  let f1 = GetForceOfPlayer(source)
  let f2 = GetForceOfPlayer(source)
  switch GetSpellAbilityId()
    case aWar
      if player_stats[source_id].getAllianceState(target) == bj_ALLIANCE_UNALLIED
        return
      player_stats[source_id].setAlliance(target, bj_ALLIANCE_UNALLIED)
      player_stats[target.getId()].setAlliance(source, bj_ALLIANCE_UNALLIED)

      for i = 0 to PLAYER_SLOTS - 1
        let current_f = GetForceOfPlayer(players[i])
        if players[i] == target
          warningToPlayer(source_s + " has declared war on you!", players[i])
        else if current_f == f1 or current_f == f2
          attentionToPlayer(source_s + " has declared war on your brother-in-arms, " + target_s + "!", players[i])
        else
          noteToPlayer(source_s + " has declared war on " + target_s, players[i])

    case aAlly
      if player_stats[source_id].getAllianceState(target) == bj_ALLIANCE_ALLIED_VISION
        return
      player_stats[source_id].setAlliance(target, bj_ALLIANCE_ALLIED_VISION)

      for i = 0 to PLAYER_SLOTS - 1
        let current_f = GetForceOfPlayer(players[i])
        if players[i] == target
          goodNewsToPlayer(source_s + " wants to ally you", players[i])
        else if current_f == f1 or current_f == f2
          noteToPlayer(source_s + " allied " + target_s, players[i])
        else
          noteToPlayer(source_s + " allied " + target_s, players[i])

    case aNeutral
      if player_stats[source_id].getAllianceState(target) == bj_ALLIANCE_NEUTRAL
        return
      player_stats[source_id].setAlliance(target, bj_ALLIANCE_NEUTRAL)

      for i = 0 to PLAYER_SLOTS - 1
        let current_f = GetForceOfPlayer(players[i])
        if players[i] == target
          noteToPlayer(source_s + " is now neutral towards you", players[i])
        else if current_f == f1 or current_f == f2
          noteToPlayer(source_s + " shows " + target_s + " neutrality", players[i])
        else
          noteToPlayer(source_s + " shows " + target_s + " neutrality", players[i])

    case aUnally
      if player_stats[source_id].getAllianceState(target) == bj_ALLIANCE_NEUTRAL
        return
      player_stats[source_id].setAlliance(target, bj_ALLIANCE_NEUTRAL)

      for i = 0 to PLAYER_SLOTS - 1
        let current_f = GetForceOfPlayer(players[i])
        if players[i] == target
          noteToPlayer(source_s + " unallies you!", players[i])
        else if current_f == f1 or current_f == f2
          noteToPlayer(source_s + " unallied " + target_s, players[i])
        else
          noteToPlayer(source_s + " unallied " + target_s, players[i])

    //@TODO fix share!!!!!
    /*
    case aShareUnits
      if player_stats[source_id].getAllianceState(target) == bj_ALLIANCE_ALLIED_ADVUNITS
        return
      player_stats[source_id].setAlliance(target, bj_ALLIANCE_ALLIED_ADVUNITS)


      // MULTIBOARD KOSTYL'
      multiboards[target.getId()] = null
      multiboards[target.getId()] = createCoEMultiboard()
      multiboards[target.getId()].display(target, true)

      multiboards[source.getId()] = null
      multiboards[source.getId()] = createCoEMultiboard()
      multiboards[source.getId()].display(source, true)
      //KOSTYL'


      for i = 0 to PLAYER_SLOTS - 1
        let current_f = GetForceOfPlayer(players[i])
        if players[i] == target
          goodNewsToPlayer(source_s + " wants to share his rule with you!", players[i])
        else if current_f == f1 or current_f == f2
          noteToPlayer(source_s + " now shares rule with " + target_s, players[i])
        else
          noteToPlayer(source_s + " now shares rule with " + target_s, players[i])
  /* if wasDiplomacySpell and prev_alliance == bj_ALLIANCE_ALLIED_ADVUNITS and player_stats[source_id].getAllianceState(target) != bj_ALLIANCE_ALLIED_ADVUNITS
    // Dealing with multibaord that disappears when someone shares control */



function cond() returns bool
  // Player cannot do diplomacy with himself
  // and with someone who's absent
  if GetSpellAbilityUnit().getOwner() == GetSpellTargetUnit().getOwner() or not GetSpellTargetUnit().getOwner().isIngame()
    return false

  var id = GetSpellAbilityId()

  return id == aWar or id == aAlly or id == aNeutral or id == aUnally or id == aShareUnits

init
  CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT)
    ..addCondition(Condition(function cond))
    ..addAction(function action)
