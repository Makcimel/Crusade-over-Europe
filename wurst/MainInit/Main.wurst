package Main
import LinkedList
import ClosureEvents


public let dbg_msg = true
public let dbg_mode = true
public let dbg_player = 0

// Maximum number of players.
public let PLAYER_SLOTS = 24

// Players and forces
public let fWEsize = 6
public let fEEsize = 6
public let fMEsize = 6
public let fBZsize = 4

public let fWE = CreateForce()
public let fEE = CreateForce()
public let fME = CreateForce()
public let fBZ = CreateForce()

public let kWE = 0
public let kEE = 1
public let kME = 2
public let kBZ = 3

public let kForcesSize = 4
public constant force array forces = [fWE, fEE, fME, fBZ]
public constant color array forces_colors = [color(62, 194, 255), color(255, 238, 0), color(0, 201, 10), color(184, 0, 107)]
public string array ksFactionAdjColored = [forces_colors[0].toColorString() + "Western European|r ",
																					 forces_colors[1].toColorString() + "Eastern European|r ",
																					 forces_colors[2].toColorString() + "Middle Eastern|r ",
																					 forces_colors[3].toColorString() + "Byzantine|r "]

// Starting resources
public let kStartGold = 260
public let kStartLumber = 250
// Which units do players get once they are settled
// correspondand to force id
public let kStartingUnits = [ 
	// WE
	asList(
	uPeasantWE, uPeasantWE, uPeasantWE, uPeasantWE, uPeasantWE, uPeasantWE,
	uWorkerWE, uWorkerWE, uWorkerWE, uWorkerWE,
	uGeneralWE,
	uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman
),asList(
	// EE
	uPeasantWE, uPeasantWE, uPeasantWE, uPeasantWE, uPeasantWE, uPeasantWE,
	uWorkerWE, uWorkerWE, uWorkerWE, uWorkerWE,
	uGeneralWE,
	uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman
),asList(
	// ME
	uPeasantME, uPeasantME, uPeasantME, uPeasantME, uPeasantME, uPeasantME,
	uWorkerME, uWorkerME, uWorkerME, uWorkerME,
	uGeneralWE,
	uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman
),asList(
	// BZ
	uPeasantBZ, uPeasantBZ, uPeasantBZ, uPeasantBZ, uPeasantBZ, uPeasantBZ,
	uWorkerBZ, uWorkerBZ, uWorkerBZ, uWorkerBZ,
	uGeneralWE,
	uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman
)]

// Math, or near it
public let INF_REAL = REAL_MAX


// Units
public let uSettler = 'h00J'
public let uSettlerReadyToSettle = 'h00I'
public let uDiplomacy = 'H037'
public let uEconomy = 'H03F'

// WE
public let uPeasantWE = 'h000'
public let uWorkerWE = 'h004'
public let uGeneralWE = 'H03A'
public let uMilitiaSpearman = 'h02B'

// EE

// ME
public let uPeasantME = 'h06G'
public let uWorkerME = 'h06H'

// BZ
public let uPeasantBZ = 'h046'
public let uWorkerBZ = 'h04G'


// CAPITOL
public let uCapitol1 = 'h001'
public let uCapitol2 = 'h002'
public let uCapitol3 = 'h003'
// AUTO
public let uAutonomousTH = 'h043'
// HALLS - CASTLES
public let uTH = 'h031'
public let uCH = 'h03M'
public let uMotteBailey = 'h02C'
public let uCastle = 'h02D'
public let uStronghold = 'h01l'
public let uDummyMotteBailey = 'h051'
public let uDummyCH = 'h04U'
public let uDummyCH2Castle = 'h00K'
public let uDummyTH = 'h00L'

public let uUniversity = 'h015'


// - - - - - - - - - - - - - - - - MESSAGES - - - - - - - - - - - - - - - - - - 

// Messages
// For all players
let kWarningDur = 30.0
constant string array ksWarning = ["Warning!"]
let ksMsgCount = 3 // So every array should be 3 strings long
constant string array ksWarningWE = ["God save us! Terrible news, my lord!", "The messenger came to us with horrific news! May we execute him?", "A mere nightmare, Your Mightiness!"]
constant string array ksWarningEE = ["Great Prince, we have horrific news!", "The God is angry, Great Prince!", "Great Prince, we have horrific news!"]
constant string array ksWarningME = ["Oh, Great Caliph! We have terrible news", "Oh, Great Caliph! We have terrible news", "Oh, Great Caliph! We have terrible news"]
constant string array ksWarningBZ = ["My Basileus, may the God bless you. We have horrific news!", "My Basileus, may the God bless you. We have horrific news!", "My Basileus, may the God bless you. We have horrific news!"]

let kNoteDur = 15.0
constant string array ksNote = ["Note:"]
constant string array ksNoteWE = ["Your Majesty, there is something you need to know", "The messenger came to us with news. No matter, could I execute him?", "Fresh news from the messenger, milord!"]
constant string array ksNoteEE = ["Great Prince, a messenger came with news", "May the God bless you, Great Prince, we have some news", "There is something you should know, Great Prince"]
constant string array ksNoteME = ["May Allah bless you, Caliph! We have some news", "May Allah bless you, Caliph! We have some news", "May Allah bless you, Caliph! We have some news"]
constant string array ksNoteBZ = ["My Basileus, we have some news", "My Basileus, we have some news", "My Basileus, we have some news"]

let kGoodNewsDur = 15.0
constant string array ksGoodNews = ["Good news!"]
constant string array ksGoodNewsWE = ["Good news indeed, my lord!", "The God has blessed us, Your Majesty! We have good news", "The messenger with good news came to us. May I torture him a little?"]
constant string array ksGoodNewsEE = ["Great news, Prince!", "Great news, Prince!", "Great news, Prince!"]
constant string array ksGoodNewsME = ["The Allah loves us, Caliph! We have great news", "The Allah loves us, Caliph! We have great news", "The Allah loves us, Caliph! We have great news"]
constant string array ksGoodNewsBZ = ["Good news, my Basileus!", "Good news, my Basileus!", "Good news, my Basileus!"]

let kAttentionDur = 30.0
constant string array ksAttention = ["Attention!"]
constant string array ksAttentionWE = ["Your Majesty, important news!", "May the God bless you, my lord. There is somthing you must know!", "There is something that needs your attention, my lord!"]
constant string array ksAttentionEE = ["You need to see this, Great Prince!", "You need to see this, Great Prince!", "You need to see this, Great Prince!"]
constant string array ksAttentionME = ["My Caliph, there is something you need to know!", "My Caliph, there is something you need to know!", "My Caliph, there is something you need to know!"]
constant string array ksAttentionBZ = ["My Basileus, there is something you need to know!", "My Basileus, there is something you need to know!", "My Basileus, there is something you need to know!"]



// - - - - -  - - - - - - - - - - - - - CITIES - - - - - - - - - - - - - - - - - - - - - - - -

public let kCityLifePercentToCapture = 50.0
public let kCityLifePercentOnceItCaptured = 60.0
public let kCityManaPercentOnceItCapruted = 30.0

public let kCityTypes = asList(uCapitol1, uCapitol2, uCapitol3, uAutonomousTH, uTH, uCH, uMotteBailey, uCastle, uStronghold, uDummyMotteBailey, uDummyCH)

// Changes only in main init
public var cityCount = 0

public let kCityNameSize = 6.0
public let kCityNameLimit = 24 

public let kCityNameXYZ = vec3(0.0, 100.0, 0.0)
// For every second char, text will be moved to this position in x
public let kCityNameAlignFactor = -15.0

// Messages
public let ksCityDescPrefix = "- - - - - - "
public let ksCityDescSuffix = " - - - - - -"


// - - - - -  - - - - - - - - - - - - - Abilities - - - - -  - - - - - - - - - - - - - - - - -

public let aWar = 'A01T'
public let aAlly = 'A01U'
public let aNeutral = 'A01V'
public let aUnally = 'A01X'
public let aShareUnits = 'A01W'
public let aGrantIndependence = 'A02Z'
public let aSubjugate = 'A030'


// - - - - - - - - - - - - - - - - - - - - - CITIES - - - - - - - - - - - - - - - - - - - - -

// If the city unit is upgraded, use this.
let kCityRadiusCheckUpgrade = 300.0

//////////////////////////////////////////CITY CLASS/////////////////////////////////////////
public class City
	// Remember to change unit every time!
	private unit city_unit
	private string city_name
	// number of the city in array
	private int city_id
	// Everyone can see this. Only?
	private texttag city_name_tt
	// id -- int, not big force type.
	private int force_id
	private int player_id
	private vec2 city_pos

	// Limit - kCityNameLimit
	function ChangeCityName(string new_name)
		city_name = new_name.substring(0, kCityNameLimit)
		// Floating text limit :(
		//city_name_tt.setText(city_name, kCityNameSize)
		// city point + upper + align it to center
		//city_name_tt.setPos(city_unit.getPos3Real() + kCityNameXYZ + vec3(kCityNameAlignFactor * city_name.length()/2, 0.0, 0.0))

	function ShowCityNameTT()
		city_name_tt = CreateTextTag()
		city_name_tt.setText(city_name, kCityNameSize)
		// city point + upper + align it to center
		city_name_tt.setPos(city_unit.getPos3Real() + kCityNameXYZ + vec3(kCityNameAlignFactor * city_name.length()/2, 0.0, 0.0))
	
	// O(1)
	function OnCityClick(player pl)
		SomethingToPlayer(ksCityDescPrefix + ksFactionAdjColored[force_id]  + " city of " + city_name + ksCityDescSuffix, 
											" ", pl, kNoteDur)

	function GetCityUnit() returns unit
		return city_unit

	function GetCityForceId() returns int
		return force_id

	function ReplaceCity(int unit_id)
		city_unit = ReplaceUnitBJ(city_unit, unit_id, bj_UNIT_STATE_METHOD_RELATIVE)
		if dbg_msg
			AttentionToPlayer("Replaced city", players[dbg_player])

	function ChangeOwner(int pl_id)
		city_unit.setOwner(players[pl_id], true)
		player_id = pl_id
		force_id = GetForceId(pl_id)

	function SettleCity(int pl_id)
		ReplaceCity(uCapitol1)
		ChangeOwner(pl_id)

	function GrantIndependence()
		ReplaceCity(uAutonomousTH)

	function Capture(player whoCaptures)
		ChangeOwner(whoCaptures.getId())
		SetUnitLifePercentBJ(city_unit, kCityLifePercentOnceItCaptured)
		SetUnitManaPercentBJ(city_unit, kCityManaPercentOnceItCapruted)

	// City unit, name of City, Force id(int).
	construct(unit u, string n, int f_id)
		city_unit = u
		// So that we will know where is it
		city_pos = city_unit.getPos()
		city_name = n
		
		force_id = f_id
		player_id = city_unit.getOwner().getId()

		ChangeCityName(n)

		city_id = cityCount
		cityCount++

		// Change the unit if it was upgraded.
		EventListener.add(EVENT_PLAYER_UNIT_UPGRADE_FINISH) ->
			let un = GetTriggerUnit()
			if isCity(un) and un.getPos().inRange(city_pos, kCityRadiusCheckUpgrade)
				if un.getTypeId() == uDummyCH
					ReplaceUnitBJ(un, uCH, bj_UNIT_STATE_METHOD_RELATIVE)
				if un.getTypeId() == uDummyTH
					ReplaceUnitBJ(un, uTH, bj_UNIT_STATE_METHOD_RELATIVE)
				if un.getTypeId() == uDummyCH2Castle
					ReplaceUnitBJ(un, uCastle, bj_UNIT_STATE_METHOD_RELATIVE)
				if un.getTypeId() == uDummyMotteBailey
					ReplaceUnitBJ(un, uMotteBailey, bj_UNIT_STATE_METHOD_RELATIVE)
				city_unit = un
				if dbg_msg
					AttentionToPlayer("city unit changed", players[dbg_player])


//////////////////////////////////////////CITY CLASS/////////////////////////////////////////

public City array cities

// O(1)
public function isCity(unit u) returns bool
	int id = u.getTypeId()
	for city_type_id in kCityTypes
		if id == city_type_id
			return true
	return false

// -1 - not a city
// O(n)     
public function GetCityId(unit u) returns int
	for i = 0 to cityCount - 1
		if cities[i].GetCityUnit() == u
			return i
	return -1

// - - - - - - - - - - - - - - - - - - - - - - PLAYERS - - - - - - - - - - - - - - - - - - - - - - - - 
// Player stat for every player. Contains many things.
let PLAYER_SELF = -1
public class PlayerStats
	private int unhappiness
	private int force_id
	private player pl
	private int array[PLAYER_SLOTS] alliance_states
	private bool is_in_game = false

	function ChangeUnhapiness(int change)
		if not is_in_game
			return
		// REMOVE WHEN YOU'RE DONE WITH CONVERTING
		udg_Unhappiness[pl.getId()] += change
		unhappiness += change
		if (change > 0)
			AttentionToPlayer("Unhappiness of your people has risen by " + change.toString() + " points!\nNow you have " + unhappiness.toString(), pl)
		else if (change < 0)
			GoodNewsToPlayer("Unhappiness of your people has dropped down by " + (-change).toString() + " points!\nNow you have " + unhappiness.toString(), pl)
	
	function GetUnhapiness() returns int
		return unhappiness


	function isInGame() returns bool
		return is_in_game
		
	function SetInGame(bool flag)
		is_in_game = flag

	// - - - - - - - - - - - ALLIANCES - - - - - - - - -  - - - - - - - -
	function SetAlliance(player which_player, int alliance_state)
		int id = which_player.getId()
		if not is_in_game
			return
		if id >= PLAYER_SLOTS
			return 
		if alliance_states[id] == alliance_state or which_player == pl
			return
		alliance_states[id] = alliance_state
		SetPlayerAllianceStateBJ(pl, which_player, alliance_state)

	function GetAllianceState(player which_player) returns int
		return alliance_states[which_player.getId()]

	// - - - - - - - - - - - - FORCES  - - - - - - - - - - - - - - - - - -
	function GetForceId() returns int
		return force_id
	
	function ChangeForce(int f_id)
		// if we haven't ever been in any force, just change it
		if force_id != -1
			forces[force_id].removePlayer(pl)

		force_id = f_id
		forces[force_id].addPlayer(pl)

		// CHANGE IF YOU ADD FORCES
		switch force_id 
			case kWE
				SetPlayerUnitAvailableBJ(uPeasantWE, true, pl)
				SetPlayerUnitAvailableBJ(uWorkerWE, true, pl)

				SetPlayerUnitAvailableBJ(uPeasantME, false, pl)
				SetPlayerUnitAvailableBJ(uWorkerME, false, pl)
				SetPlayerUnitAvailableBJ(uPeasantBZ, false, pl)
				SetPlayerUnitAvailableBJ(uWorkerBZ, false, pl)
			case kEE
				// Identical to WE, for now
				SetPlayerUnitAvailableBJ(uPeasantWE, true, pl)
				SetPlayerUnitAvailableBJ(uWorkerWE, true, pl)

				SetPlayerUnitAvailableBJ(uPeasantME, false, pl)
				SetPlayerUnitAvailableBJ(uWorkerME, false, pl)
				SetPlayerUnitAvailableBJ(uPeasantBZ, false, pl)
				SetPlayerUnitAvailableBJ(uWorkerBZ, false, pl)
			case kME
				SetPlayerUnitAvailableBJ(uPeasantME, true, pl)
				SetPlayerUnitAvailableBJ(uWorkerME, true, pl)

				SetPlayerUnitAvailableBJ(uPeasantWE, false, pl)
				SetPlayerUnitAvailableBJ(uWorkerWE, false, pl)
				SetPlayerUnitAvailableBJ(uPeasantBZ, false, pl)
				SetPlayerUnitAvailableBJ(uWorkerBZ, false, pl)
			case kBZ
				SetPlayerUnitAvailableBJ(uPeasantBZ, true, pl)
				SetPlayerUnitAvailableBJ(uWorkerBZ, true, pl)
				if dbg_msg
					AttentionToPlayer("BZ settled", players[dbg_player])
				SetPlayerUnitAvailableBJ(uPeasantME, false, pl)
				SetPlayerUnitAvailableBJ(uWorkerME, false, pl)
				SetPlayerUnitAvailableBJ(uPeasantWE, false, pl)
				SetPlayerUnitAvailableBJ(uWorkerWE, false, pl)

	// - - - - - - - - - - - CONSTRUCT - - - - - - - - - - - - - - - - - -
	construct(player which_player)
		unhappiness = 0
		force_id = -1
		pl = which_player
		is_in_game = which_player.isIngame()
		for i = 0 to PLAYER_SLOTS - 1
			if players[i] == which_player
				alliance_states[i] = PLAYER_SELF
			else
				alliance_states[i] = bj_ALLIANCE_UNALLIED

public PlayerStats array player_stats


// - - - - - - - - - - - - - - - GLOBAL TIMER - - - - - - - - - - - - - - - - - - - - - - -
timer global_timer = CreateTimer()
real elapsed_time

public function GetElapsedTime() returns real
	return elapsed_time

function GetForceId(int player_id) returns int
	for i = 0 to kForcesSize - 1
		if forces[i].containsPlayer(players[player_id])
			return i
	return -1





function GetWarningStringForPlayer(player pl) returns string
	let f = player_stats[pl.getId()].GetForceId()
	int r = GetRandomInt(0, ksMsgCount - 1)
	string s = ""
	if f == kWE
		s = ksWarningWE[r]
	else if f == kEE
		s = ksWarningEE[r]
	else if f == kME
		s = ksWarningME[r]
	else if f == kBZ
		s = ksWarningBZ[r]
	else
		s = ksWarning[0]
	return "|cffff0000" + s + "|r"
	
function GetNoteStringForPlayer(player pl) returns string
	let f = player_stats[pl.getId()].GetForceId()
	int r = GetRandomInt(0, ksMsgCount - 1)
	string s = ""
	if f == kWE
		s = ksNoteWE[r]
	else if f == kEE
		s = ksNoteEE[r]
	else if f == kME
		s = ksNoteME[r]
	else if f == kBZ
		s = ksNoteBZ[r]
	else
		s = ksNote[0]
	return "|cff00ccff" + s + "|r"

function GetGoodNewsStringForPlayer(player pl) returns string
	let f = player_stats[pl.getId()].GetForceId()
	int r = GetRandomInt(0, ksMsgCount - 1)
	string s = ""
	if f == kWE
		s = ksGoodNewsWE[r]
	else if f == kEE
		s = ksGoodNewsEE[r]
	else if f == kME
		s = ksGoodNewsME[r]
	else if f == kBZ
		s = ksGoodNewsBZ[r]
	else
		s = ksGoodNews[0]
	return "|cff00ff00" + s + "|r"

function GetAttentionStringForPlayer(player pl) returns string
	let f = player_stats[pl.getId()].GetForceId()
	int r = GetRandomInt(0, ksMsgCount - 1)
	string s = ""
	if f == kWE
		s = ksAttentionWE[r]
	else if f == kEE
		s = ksAttentionEE[r]
	else if f == kME
		s = ksAttentionME[r]
	else if f == kBZ
		s = ksAttentionBZ[r]
	else
		s = ksAttention[0]
	return "|cffffa600" + s + "|r"

public function dbg(string msg)
	DisplayTimedTextToPlayer(players[dbg_player], 0, 0, 60, msg)

public function dbgt(string msg, real sec)
	DisplayTimedTextToPlayer(players[dbg_player], 0, 0, sec, msg)

public function WarningToPlayer(string msg, player pl)
	DisplayTimedTextToPlayer(pl, 0, 0, kWarningDur, GetWarningStringForPlayer(pl))
	DisplayTimedTextToPlayer(pl, 0, 0, kWarningDur, msg)
public function NoteToPlayer(string msg, player pl)
	DisplayTimedTextToPlayer(pl, 0, 0, kNoteDur, GetNoteStringForPlayer(pl))
	DisplayTimedTextToPlayer(pl, 0, 0, kNoteDur, msg)
public function GoodNewsToPlayer(string msg, player pl)
	DisplayTimedTextToPlayer(pl, 0, 0, kGoodNewsDur, GetGoodNewsStringForPlayer(pl))
	DisplayTimedTextToPlayer(pl, 0, 0, kGoodNewsDur, msg)
public function AttentionToPlayer(string msg, player pl)
	DisplayTimedTextToPlayer(pl, 0, 0, kGoodNewsDur, GetAttentionStringForPlayer(pl))
	DisplayTimedTextToPlayer(pl, 0, 0, kGoodNewsDur, msg)
public function SomethingToPlayer(string msg1, string msg2, player pl, real dur)
	DisplayTimedTextToPlayer(pl, 0, 0, dur, msg1)
	DisplayTimedTextToPlayer(pl, 0, 0, dur, msg2)

public function WarningToForce(string msg, force f)
	for i = 0 to PLAYER_SLOTS - 1
		if GetForceOfPlayer(players[i]) == f
			let pl = players[i]
			DisplayTimedTextToPlayer(pl, 0, 0, kWarningDur, GetWarningStringForPlayer(pl))
			DisplayTimedTextToPlayer(pl, 0, 0, kWarningDur, msg)
public function NoteToForce(string msg, force f)
	for i = 0 to PLAYER_SLOTS - 1
		if GetForceOfPlayer(players[i]) == f
			let pl = players[i]
			DisplayTimedTextToPlayer(pl, 0, 0, kNoteDur, GetNoteStringForPlayer(pl))
			DisplayTimedTextToPlayer(pl, 0, 0, kNoteDur, msg)
public function GoodNewsToForce(string msg, force f)
	for i = 0 to PLAYER_SLOTS - 1
		if GetForceOfPlayer(players[i]) == f
			let pl = players[i]
			DisplayTimedTextToPlayer(pl, 0, 0, kGoodNewsDur, GetGoodNewsStringForPlayer(pl))
			DisplayTimedTextToPlayer(pl, 0, 0, kGoodNewsDur, msg)
public function AttentionToForce(string msg, force f)
	for i = 0 to PLAYER_SLOTS - 1
		if GetForceOfPlayer(players[i]) == f
			let pl = players[i]
			DisplayTimedTextToPlayer(pl, 0, 0, kGoodNewsDur, GetAttentionStringForPlayer(pl))
			DisplayTimedTextToPlayer(pl, 0, 0, kGoodNewsDur, msg)


init
	global_timer.startPeriodic(0.01) ->
		elapsed_time += 0.01