package Main
import LinkedList
import MutliboardTools
import ClosureEvents
import ClosureTimers
import MathTools
import Logarithm
import StringTools

public let dbg_msg = false
public let dbg_mode = false
public let dbg_player = 0

// Maximum number of players.
public let PLAYER_SLOTS = 24

// Players and forces
public let fWEsize = 6
public let fEEsize = 6
public let fMEsize = 6
public let fBZsize = 4

public let fWE = CreateForce()
public let fEE = CreateForce()
public let fME = CreateForce()
public let fBZ = CreateForce()

public let kWE = 0
public let kEE = 1
public let kME = 2
public let kBZ = 3

public let kForcesSize = 4
public constant force array forces = [fWE, fEE, fME, fBZ]
public constant color array forces_colors = [color(62, 194, 255), color(255, 238, 0), color(0, 201, 10), color(184, 0, 107)]
public string array ksFactionAdjColored = [forces_colors[0].toColorString() + "Western European|r ",
																					 forces_colors[1].toColorString() + "Eastern European|r ",
																					 forces_colors[2].toColorString() + "Middle Eastern|r ",
																					 forces_colors[3].toColorString() + "Byzantine|r "]

// Starting resources
public let kStartGold = 260
public let kStartLumber = 250
// Which units do players get once they are settled
// correspondand to force id
public let kStartingUnits = [ 
	// WE
	asList(
	uPeasantWE, uPeasantWE, uPeasantWE, uPeasantWE, uPeasantWE, uPeasantWE,
	uWorkerWE, uWorkerWE, uWorkerWE, uWorkerWE,
	uGeneralWE,
	uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman
),asList(
	// EE
	uPeasantWE, uPeasantWE, uPeasantWE, uPeasantWE, uPeasantWE, uPeasantWE,
	uWorkerWE, uWorkerWE, uWorkerWE, uWorkerWE,
	uGeneralWE,
	uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman
),asList(
	// ME
	uPeasantME, uPeasantME, uPeasantME, uPeasantME, uPeasantME, uPeasantME,
	uWorkerME, uWorkerME, uWorkerME, uWorkerME,
	uGeneralWE,
	uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman
),asList(
	// BZ
	uPeasantBZ, uPeasantBZ, uPeasantBZ, uPeasantBZ, uPeasantBZ, uPeasantBZ,
	uWorkerBZ, uWorkerBZ, uWorkerBZ, uWorkerBZ,
	uGeneralWE,
	uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman, uMilitiaSpearman
)]

// Math, or near it
public let INF_REAL = REAL_MAX


// Units
public let uSettler = 'h00J'
public let uSettlerReadyToSettle = 'h00I'
public let uDiplomacy = 'H037'
public let uEconomy = 'H03F'

// WE
public let uPeasantWE = 'h000'
public let uWorkerWE = 'h004'
public let uGeneralWE = 'H03A'
public let uMilitiaSpearman = 'h02B'

// EE

// ME
public let uPeasantME = 'h06G'
public let uWorkerME = 'h06H'

// BZ
public let uPeasantBZ = 'h046'
public let uWorkerBZ = 'h04G'


// CAPITOL
public let uCapitol1 = 'h001'
public let uCapitol2 = 'h002'
public let uCapitol3 = 'h003'
// AUTO
public let uAutonomousTH = 'h043'
// HALLS - CASTLES
public let uTH = 'h031'
public let uCH = 'h03M'
public let uMotteBailey = 'h02C'
public let uCastle = 'h02D'
public let uStronghold = 'h01l'
//@TODO Remove this shit:
public let uDummyMotteBailey = 'h051'
public let uDummyCH = 'h04U'
public let uDummyCH2Castle = 'h00K'
public let uDummyTH = 'h00L'

public let uUniversity = 'h015'

// Ores (Mined)
// 15 income
public let uCopperMine = 'h03E'
// 50
public let uGoldMine = 'h039'
// 25
public let uIronMine = 'h03D'
// 40
public let uSilverMine = 'h03C'
public let usOres =       asList(uCopperMine, uGoldMine, uIronMine, uSilverMine)
public let usIncomeOres = asList(15         , 50       , 25       , 40         )


// - - - - - - - - - - - - - - - - MESSAGES - - - - - - - - - - - - - - - - - - 

// Messages
// For all players
let kWarningDur = 30.0
constant string array ksWarning = ["Warning!"]
let ksMsgCount = 3 // So every array should be 3 strings long
constant string array ksWarningWE = ["God save us! Terrible news, my lord!", "The messenger came to us with horrific news! May we execute him?", "A mere nightmare, Your Mightiness!"]
constant string array ksWarningEE = ["Great Prince, we have horrific news!", "The God is angry, Great Prince!", "Great Prince, we have horrific news!"]
constant string array ksWarningME = ["Oh, Great Caliph! We have terrible news", "Oh, Great Caliph! We have terrible news", "Oh, Great Caliph! We have terrible news"]
constant string array ksWarningBZ = ["My Basileus, may the God bless you. We have horrific news!", "My Basileus, may the God bless you. We have horrific news!", "My Basileus, may the God bless you. We have horrific news!"]

let kNoteDur = 15.0
constant string array ksNote = ["Note:"]
constant string array ksNoteWE = ["Your Majesty, there is something you need to know", "The messenger came to us with news. No matter, could I execute him?", "Fresh news from the messenger, milord!"]
constant string array ksNoteEE = ["Great Prince, a messenger came with news", "May the God bless you, Great Prince, we have some news", "There is something you should know, Great Prince"]
constant string array ksNoteME = ["May Allah bless you, Caliph! We have some news", "May Allah bless you, Caliph! We have some news", "May Allah bless you, Caliph! We have some news"]
constant string array ksNoteBZ = ["My Basileus, we have some news", "My Basileus, we have some news", "My Basileus, we have some news"]

let kGoodNewsDur = 15.0
constant string array ksGoodNews = ["Good news!"]
constant string array ksGoodNewsWE = ["Good news indeed, my lord!", "The God has blessed us, Your Majesty! We have good news", "The messenger with good news came to us. May I torture him a little?"]
constant string array ksGoodNewsEE = ["Great news, Prince!", "Great news, Prince!", "Great news, Prince!"]
constant string array ksGoodNewsME = ["The Allah loves us, Caliph! We have great news", "The Allah loves us, Caliph! We have great news", "The Allah loves us, Caliph! We have great news"]
constant string array ksGoodNewsBZ = ["Good news, my Basileus!", "Good news, my Basileus!", "Good news, my Basileus!"]

let kAttentionDur = 30.0
constant string array ksAttention = ["Attention!"]
constant string array ksAttentionWE = ["Your Majesty, important news!", "May the God bless you, my lord. There is somthing you must know!", "There is something that needs your attention, my lord!"]
constant string array ksAttentionEE = ["You need to see this, Great Prince!", "You need to see this, Great Prince!", "You need to see this, Great Prince!"]
constant string array ksAttentionME = ["My Caliph, there is something you need to know!", "My Caliph, there is something you need to know!", "My Caliph, there is something you need to know!"]
constant string array ksAttentionBZ = ["My Basileus, there is something you need to know!", "My Basileus, there is something you need to know!", "My Basileus, there is something you need to know!"]



// - - - - -  - - - - - - - - - - - - - CITIES - - - - - - - - - - - - - - - - - - - - - - - -

public let kCityRadius = 1000.0

public let kCityLifePercentToCapture = 50.0
public let kCityLifePercentOnceItCaptured = 60.0
public let kCityManaPercentOnceItCapruted = 30.0

public let kCityTypes =   asList(uCapitol1, uCapitol2, uCapitol3, uAutonomousTH, uTH, uCH, uMotteBailey, uCastle, uStronghold, uDummyMotteBailey, uDummyCH, uDummyCH2Castle, uDummyTH)
public let kCityBaseTax = asList(20       , 50       , 120      , 5            , 10 , 30 , 15          , 20     , 40         ) // Should not go here

// Changes only in main init
public var cityCount = 0

public let kCityNameSize = 6.0
public let kCityNameLimit = 24 

public let kCityNameXYZ = vec3(0.0, 100.0, 0.0)
// For every second char, text will be moved to this position in x
public let kCityNameAlignFactor = -15.0

// Messages OUTDATED
public let ksCityDescPrefix = "- - - - - - "
public let ksCityDescSuffix = " - - - - - -"


// - - - - -  - - - - - - - - - - - - - Abilities - - - - -  - - - - - - - - - - - - - - - - -

public let aWar = 'A01T'
public let aAlly = 'A01U'
public let aNeutral = 'A01V'
public let aUnally = 'A01X'
public let aShareUnits = 'A01W'
public let aGrantIndependence = 'A02Z'
public let aSubjugate = 'A030'


// - - - - - - - - - - - - - - - - - - - MULTIBOARD - - - - - - - - - - - - - - - - - - - - -

public let kMultiboardRowC = 7
public let kMultiboardColC = 5
public let kMultiboardW = 10
public let kMultiboardH = 10

// Refresh rate (every X seconds)
public let kMultiboardCityRefreshRate = 1.0
public let kMultiboardResourcesRefreshRate = 0.1

// First player-reserved rows
public let kMultiboardReservedRows = 3

let kMBVal = 0.03
let kMBText = 0.07
let kMBCityNameWidth = 0.21

let kMBLine = "-"

public let kMultiboardInitWidths = [
	asList(kMBText, kMBVal, 0.01, kMBText, kMBVal),
	asList(kMBText, kMBVal, 0.01, kMBText, kMBVal),
	asList(kMBText, kMBVal, 0.01, kMBText, kMBVal),

	asList(0.0025, 0.0025, kMBCityNameWidth, 0.0025, 0.0025),
	asList(kMBText, kMBVal, kMBVal, 0.01, kMBText),
	asList(kMBText, kMBVal, kMBVal, 0.01, kMBText),
	asList(kMBText, kMBVal, kMBVal, 0.01, kMBText)
]

public let kMBFood = [1, 0]
public let kMBIron = [1, 1]
public let kMBStone = [1, 2]
public let kMBIncome = [4, 0]
public let kMBUpkeep = [4, 1]

public let kMBCityTax = [1, 4]
public let kMBCityPublicOrder = [1, 5]
public let kMBCityPop = [1, 6]
public let kMBCityPopGrowth = [2, 6]

public let kMBCityName = [2, 3]

public let kMultiboardInitStrings = [
	asList("Food", "0", "|", "Income", "0"),
	asList("Iron", "0", "|", "Upkeep", "0"),
	asList("Stone", "0", "|", " ", " "),

	asList(kMBLine, kMBLine, " ", kMBLine, kMBLine),
	asList("Tax", "0", " ", "|", " "),
	asList("Public order", "0", " ", "|", " "),
	asList("Population", "0", " ", "|", " ")
]

public multiboard array multiboards


// - - - - - - - - - - - - - - - - - - - - - CITIES - - - - - - - - - - - - - - - - - - - - -

// If the city unit is upgraded, uses this.
let kCityRadiusCheckUpgrade = 300.0
let kCityPopCountRate = 5.0
// Per month
let kCityPopGrowthRateMinMax = [0.0015, 0.0035]
// Separated by tier
let kCityPopInit = [
	asList(10000, 100000),
	asList(80000, 200000),
	asList(130000, 400000)
]

//////////////////////////////////////////CITY CLASS/////////////////////////////////////////
public class City
	
	// Remember to change unit every time!
	private unit city_unit
	private string city_name
	// number of the city in array
	private int city_id
	// Everyone can see this. Only?
	private texttag city_name_tt
	// id -- int, not big force type.
	private int force_id
	private int player_id
	private vec2 city_pos
	
	// pop consts
	private int population
	// with deviation
	private int last_pop_growth
	private real population_growth_rate
	// Count public order() if you want the true one, this is the last counted
	private real public_order_last


	// Limit - kCityNameLimit
	function ChangeCityName(string new_name)
		city_name = new_name.substring(0, kCityNameLimit)

		RefreshMultiboardIfPossible()

	function ShowCityNameTT()
		city_name_tt = CreateTextTag()
		city_name_tt.setText(city_name, kCityNameSize)
		// city point + upper + align it to center
		city_name_tt.setPos(city_unit.getPos3Real() + kCityNameXYZ + vec3(kCityNameAlignFactor * city_name.length()/2, 0.0, 0.0))
	
	function GetCityNameWithForce() returns string
		return ksFactionAdjColored[force_id]  + " city of " + city_name

	function GetCityNameWith__Fixes() returns string
		return ksCityDescPrefix + ksFactionAdjColored[force_id]  + " city of " + city_name + ksCityDescSuffix

	function OnCityClick(player pl)
		player_stats[pl.getId()].SetSelectedCityId(city_id)

	function GetCityUnit() returns unit
		return city_unit

	function GetCityForceId() returns int
		return force_id

	function ReplaceCity(int unit_id)
		city_unit = ReplaceUnitBJ(city_unit, unit_id, bj_UNIT_STATE_METHOD_RELATIVE)

	function ChangeOwner(int pl_id)
		city_unit.setOwner(players[pl_id], true)
		player_id = pl_id
		force_id = GetForceId(pl_id)

		RefreshMultiboardIfPossible()

	function SettleCity(int pl_id)
		ReplaceCity(uCapitol1)
		ChangeOwner(pl_id)

	function GrantIndependence()
		ReplaceCity(uAutonomousTH)

	function Capture(player whoCaptures)
		ChangeOwner(whoCaptures.getId())
		SetUnitLifePercentBJ(city_unit, kCityLifePercentOnceItCaptured)
		SetUnitManaPercentBJ(city_unit, kCityManaPercentOnceItCapruted)

	function RefreshMultiboardIfPossible()
		for i = 0 to PLAYER_SLOTS - 1
			if player_stats[i].GetSelectedCityId() == city_id
				player_stats[i].RefreshMultiboardCity()

	//========================COUNT TAX=================================
	function CountTax() returns int
		var tax = 0
		 
		// Base Tax count
		var base_tax = 0
		for i = 0 to kCityTypes.size()
			if city_unit.getTypeId() == kCityTypes.get(i)
				base_tax = kCityBaseTax.get(i)

		tax += base_tax

		// Count tax by watching to units surrounding city
		var count_tax = 0
		let surrounds = GetUnitsInRangeOfLocAll(kCityRadius, Location(city_pos.x, city_pos.y))
		//@TODO do this
		for u in surrounds
		

		tax += count_tax

		// Count tax by population
		var pop_tax = (SquareRoot(population.toReal()) * CountPublicOrder() / 500).toInt()

		tax += pop_tax

		// Reduce tax if city is constructing
		//@TODO
		

		return tax

	//========================COUNT PUBLIC ORDER=================================
	function CountPublicOrder() returns real
		public_order_last = 100.0 - population_growth_rate * 1000 - SquareRoot(population.toReal()) / 17
		return public_order_last

	function GetPublicOrderStr() returns string
		real po = CountPublicOrder()
		color clr = color((255 - po / 100 * 255).toInt(), (po / 100 * 255).toInt(), 0)
		return clr.toColorString().toLowerCase() + po.toInt().toString() + "%|r"

	//========================COUNT POP=================================
	function GetPopulation() returns int
		return population

	function GetPopulationGrowthRate() returns real
		return population_growth_rate

	function GetPopulationGrowthRateStr() returns string
		if dbg_msg
			return (population_growth_rate * 100).toString(2) + "%"
		
		return GetStringColoredBasedOnSign((population * population_growth_rate).toInt())

	function GetPopulationGrowthStr() returns string
		return GetStringColoredBasedOnSign(last_pop_growth)

	function GetPopulationStr() returns string
		if dbg_msg
			return population.toString()


		var str = ""
		if population < 10000
			str = (population / 1000).toInt().toString() + "," + ((population % 1000) / 100).toInt().toString() + "k"
		else
			str = (population / 1000).toInt().toString() + "k"
		return str

	//=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-CONSTRUCT-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-
	// City unit, name of City, Force id(int).
	// tier - is it big city, or a minor one (0, 1)
	construct(unit u, string n, int f_id, int tier)
		city_unit = u
		// So that we will know where is it
		city_pos = city_unit.getPos()
		city_name = n
		
		force_id = f_id
		player_id = city_unit.getOwner().getId()

		city_name = n.substring(0, kCityNameLimit)

		city_id = cityCount
		cityCount++

		//=====================POPULATION MANAGEMENT======================================================

		population_growth_rate = GetRandomValWithNormalDistribution(kCityPopGrowthRateMinMax[0], kCityPopGrowthRateMinMax[1],
																										1.0, 0)
		population = GetRandomValWithNormalDistribution(kCityPopInit[tier].get(0).toReal(), kCityPopInit[tier].get(1).toReal(),
																										10.0, 0).toInt()


		//===========================POP COUNT=================================
		doPeriodically(kCityPopCountRate) cbPOP ->
			population_growth_rate += GetRandomReal(-0.008, 0.009) * population_growth_rate
			if population_growth_rate >= GetRandomReal(0.002, 0.01)
				population_growth_rate -= GetRandomReal(0.001, 0.002)
			
			int pop_prev = population

			population += (population * population_growth_rate).toInt()
			int pop_growth = population - pop_prev
			
			int deviation = GetRandomInt(-2 * pop_growth, pop_growth)
			population += deviation
			
			last_pop_growth = population - pop_prev

		// Change the unit if it was upgraded.
		//=============================================UPGRADE======================================================
		EventListener.add(EVENT_PLAYER_UNIT_UPGRADE_FINISH) ->
			let un = GetTriggerUnit()
			if isCity(un) and un.getPos().inRange(city_pos, kCityRadiusCheckUpgrade)
				// SHOULD BE OUTDATED
				if un.getTypeId() == uDummyCH
					ReplaceUnitBJ(un, uCH, bj_UNIT_STATE_METHOD_RELATIVE)
				if un.getTypeId() == uDummyTH
					ReplaceUnitBJ(un, uTH, bj_UNIT_STATE_METHOD_RELATIVE)
				if un.getTypeId() == uDummyCH2Castle
					ReplaceUnitBJ(un, uCastle, bj_UNIT_STATE_METHOD_RELATIVE)
				if un.getTypeId() == uDummyMotteBailey
					ReplaceUnitBJ(un, uMotteBailey, bj_UNIT_STATE_METHOD_RELATIVE)
				city_unit = un
				if dbg_msg
					AttentionToPlayer("city unit changed", players[dbg_player])
	
//////////////////////////////////////////CITY CLASS/////////////////////////////////////////

public City array cities

// O(1)
public function isCity(unit u) returns bool
	int id = u.getTypeId()
	for city_type_id in kCityTypes
		if id == city_type_id
			return true
	return false

// -1 - not a city
// O(n)     
public function GetCityId(unit u) returns int
	for i = 0 to cityCount - 1
		if cities[i].GetCityUnit() == u
			return i
	return -1

// - - - - - - - - - - - - - - - - - - - - - - PLAYERS - - - - - - - - - - - - - - - - - - - - - - - - 
// Player stat for every player. Contains many things.
let PLAYER_SELF = -1
public class PlayerStats
	private int unhappiness
	private int force_id
	private player pl
	private int array[PLAYER_SLOTS] alliance_states
	private bool is_in_game = false
	private int selected_city_id

	function ChangeUnhapiness(int change)
		if not is_in_game
			return
		unhappiness += change
		if (change > 0)
			AttentionToPlayer("Unhappiness of your people has risen by " + change.toString() + " points!\nNow you have " + unhappiness.toString(), pl)
		else if (change < 0)
			GoodNewsToPlayer("Unhappiness of your people has dropped down by " + (-change).toString() + " points!\nNow you have " + unhappiness.toString(), pl)
	
	function GetUnhapiness() returns int
		return unhappiness


	function isInGame() returns bool
		return is_in_game
		
	function SetInGame(bool flag)
		is_in_game = flag

	// - - - - - - - - - - - ALLIANCES - - - - - - - - -  - - - - - - - -
	function SetAlliance(player which_player, int alliance_state)
		int id = which_player.getId()
		if not is_in_game
			return
		if id >= PLAYER_SLOTS
			return 
		if alliance_states[id] == alliance_state or which_player == pl
			return
		alliance_states[id] = alliance_state
		SetPlayerAllianceStateBJ(pl, which_player, alliance_state)

	function GetAllianceState(player which_player) returns int
		return alliance_states[which_player.getId()]

	// - -- - - - -- - -- -- - CITY - - -- - - -- - - - -- - - - - - - 

	function RefreshMultiboardCity()
		if selected_city_id == -1
			return
		let pl_id = pl.getId()
		// City name
		multiboards[pl_id].setItemCentered(kMBCityName[0], kMBCityName[1], cities[selected_city_id].GetCityNameWithForce(), kMBCityNameWidth)
		
		// Counting taxes, etc.
		int tax
		string public_order_str
		string population_str
		string population_growth_str

		tax = cities[selected_city_id].CountTax()
		public_order_str = cities[selected_city_id].GetPublicOrderStr()
		population_str = cities[selected_city_id].GetPopulationStr()
		population_growth_str = cities[selected_city_id].GetPopulationGrowthStr()

		multiboards[pl_id]
			..setItem(kMBCityTax[0], kMBCityTax[1], tax.toString())
			..setItem(kMBCityPublicOrder[0], kMBCityPublicOrder[1], public_order_str)
			..setItem(kMBCityPop[0], kMBCityPop[1], population_str)
			..setItem(kMBCityPopGrowth[0], kMBCityPopGrowth[1], population_growth_str)

	// -1 if no city was ever selected
	function GetSelectedCityId() returns int
		return selected_city_id
	
	// also refreshses multiboard's city tab
	function SetSelectedCityId(int c_id)
		if c_id >= 0 and c_id < cityCount
			selected_city_id = c_id
			RefreshMultiboardCity()

	// - - - - - - - - - - - - FORCES  - - - - - - - - - - - - - - - - - -
	function GetForceId() returns int
		return force_id
	
	function ChangeForce(int f_id)
		// if we haven't ever been in any force, just change it
		if force_id != -1
			forces[force_id].removePlayer(pl)

		force_id = f_id
		forces[force_id].addPlayer(pl)

		// CHANGE IF YOU ADD FORCES
		switch force_id 
			case kWE
				SetPlayerUnitAvailableBJ(uPeasantWE, true, pl)
				SetPlayerUnitAvailableBJ(uWorkerWE, true, pl)

				SetPlayerUnitAvailableBJ(uPeasantME, false, pl)
				SetPlayerUnitAvailableBJ(uWorkerME, false, pl)
				SetPlayerUnitAvailableBJ(uPeasantBZ, false, pl)
				SetPlayerUnitAvailableBJ(uWorkerBZ, false, pl)
			case kEE
				// Identical to WE, for now
				SetPlayerUnitAvailableBJ(uPeasantWE, true, pl)
				SetPlayerUnitAvailableBJ(uWorkerWE, true, pl)

				SetPlayerUnitAvailableBJ(uPeasantME, false, pl)
				SetPlayerUnitAvailableBJ(uWorkerME, false, pl)
				SetPlayerUnitAvailableBJ(uPeasantBZ, false, pl)
				SetPlayerUnitAvailableBJ(uWorkerBZ, false, pl)
			case kME
				SetPlayerUnitAvailableBJ(uPeasantME, true, pl)
				SetPlayerUnitAvailableBJ(uWorkerME, true, pl)

				SetPlayerUnitAvailableBJ(uPeasantWE, false, pl)
				SetPlayerUnitAvailableBJ(uWorkerWE, false, pl)
				SetPlayerUnitAvailableBJ(uPeasantBZ, false, pl)
				SetPlayerUnitAvailableBJ(uWorkerBZ, false, pl)
			case kBZ
				SetPlayerUnitAvailableBJ(uPeasantBZ, true, pl)
				SetPlayerUnitAvailableBJ(uWorkerBZ, true, pl)
				if dbg_msg
					AttentionToPlayer("BZ settled", players[dbg_player])
				SetPlayerUnitAvailableBJ(uPeasantME, false, pl)
				SetPlayerUnitAvailableBJ(uWorkerME, false, pl)
				SetPlayerUnitAvailableBJ(uPeasantWE, false, pl)
				SetPlayerUnitAvailableBJ(uWorkerWE, false, pl)

	// - - - - - - - - - - - CONSTRUCT - - - - - - - - - - - - - - - - - -
	construct(player which_player)
		unhappiness = 0
		force_id = -1
		selected_city_id = -1
		pl = which_player
		is_in_game = which_player.isIngame()
		for i = 0 to PLAYER_SLOTS - 1
			if players[i] == which_player
				alliance_states[i] = PLAYER_SELF
			else
				alliance_states[i] = bj_ALLIANCE_UNALLIED

public PlayerStats array player_stats


// - - - - - - - - - - - - - - - GLOBAL TIMER - - - - - - - - - - - - - - - - - - - - - - -
timer global_timer = CreateTimer()
real elapsed_time

public function GetElapsedTime() returns real
	return elapsed_time

function GetForceId(int player_id) returns int
	for i = 0 to kForcesSize - 1
		if forces[i].containsPlayer(players[player_id])
			return i
	return -1




//=====================================FUNCTIONS=============================================
function GetWarningStringForPlayer(player pl) returns string
	let f = player_stats[pl.getId()].GetForceId()
	int r = GetRandomInt(0, ksMsgCount - 1)
	string s = ""
	if f == kWE
		s = ksWarningWE[r]
	else if f == kEE
		s = ksWarningEE[r]
	else if f == kME
		s = ksWarningME[r]
	else if f == kBZ
		s = ksWarningBZ[r]
	else
		s = ksWarning[0]
	return "|cffff0000" + s + "|r"
	
function GetNoteStringForPlayer(player pl) returns string
	let f = player_stats[pl.getId()].GetForceId()
	int r = GetRandomInt(0, ksMsgCount - 1)
	string s = ""
	if f == kWE
		s = ksNoteWE[r]
	else if f == kEE
		s = ksNoteEE[r]
	else if f == kME
		s = ksNoteME[r]
	else if f == kBZ
		s = ksNoteBZ[r]
	else
		s = ksNote[0]
	return "|cff00ccff" + s + "|r"

function GetGoodNewsStringForPlayer(player pl) returns string
	let f = player_stats[pl.getId()].GetForceId()
	int r = GetRandomInt(0, ksMsgCount - 1)
	string s = ""
	if f == kWE
		s = ksGoodNewsWE[r]
	else if f == kEE
		s = ksGoodNewsEE[r]
	else if f == kME
		s = ksGoodNewsME[r]
	else if f == kBZ
		s = ksGoodNewsBZ[r]
	else
		s = ksGoodNews[0]
	return "|cff00ff00" + s + "|r"

function GetAttentionStringForPlayer(player pl) returns string
	let f = player_stats[pl.getId()].GetForceId()
	int r = GetRandomInt(0, ksMsgCount - 1)
	string s = ""
	if f == kWE
		s = ksAttentionWE[r]
	else if f == kEE
		s = ksAttentionEE[r]
	else if f == kME
		s = ksAttentionME[r]
	else if f == kBZ
		s = ksAttentionBZ[r]
	else
		s = ksAttention[0]
	return "|cffffa600" + s + "|r"

public function dbg(string msg)
	if not dbg_msg and not dbg_mode
		return
	DisplayTimedTextToPlayer(players[dbg_player], 0, 0, 60, msg)

public function dbgt(string msg, real sec)
	if not dbg_msg and not dbg_mode
		return
	DisplayTimedTextToPlayer(players[dbg_player], 0, 0, sec, msg)

public function WarningToPlayer(string msg, player pl)
	DisplayTimedTextToPlayer(pl, 0, 0, kWarningDur, GetWarningStringForPlayer(pl))
	DisplayTimedTextToPlayer(pl, 0, 0, kWarningDur, msg)
public function NoteToPlayer(string msg, player pl)
	DisplayTimedTextToPlayer(pl, 0, 0, kNoteDur, GetNoteStringForPlayer(pl))
	DisplayTimedTextToPlayer(pl, 0, 0, kNoteDur, msg)
public function GoodNewsToPlayer(string msg, player pl)
	DisplayTimedTextToPlayer(pl, 0, 0, kGoodNewsDur, GetGoodNewsStringForPlayer(pl))
	DisplayTimedTextToPlayer(pl, 0, 0, kGoodNewsDur, msg)
public function AttentionToPlayer(string msg, player pl)
	DisplayTimedTextToPlayer(pl, 0, 0, kGoodNewsDur, GetAttentionStringForPlayer(pl))
	DisplayTimedTextToPlayer(pl, 0, 0, kGoodNewsDur, msg)
public function SomethingToPlayer(string msg1, string msg2, player pl, real dur)
	DisplayTimedTextToPlayer(pl, 0, 0, dur, msg1)
	DisplayTimedTextToPlayer(pl, 0, 0, dur, msg2)

public function WarningToForce(string msg, force f)
	for i = 0 to PLAYER_SLOTS - 1
		if GetForceOfPlayer(players[i]) == f
			let pl = players[i]
			DisplayTimedTextToPlayer(pl, 0, 0, kWarningDur, GetWarningStringForPlayer(pl))
			DisplayTimedTextToPlayer(pl, 0, 0, kWarningDur, msg)
public function NoteToForce(string msg, force f)
	for i = 0 to PLAYER_SLOTS - 1
		if GetForceOfPlayer(players[i]) == f
			let pl = players[i]
			DisplayTimedTextToPlayer(pl, 0, 0, kNoteDur, GetNoteStringForPlayer(pl))
			DisplayTimedTextToPlayer(pl, 0, 0, kNoteDur, msg)
public function GoodNewsToForce(string msg, force f)
	for i = 0 to PLAYER_SLOTS - 1
		if GetForceOfPlayer(players[i]) == f
			let pl = players[i]
			DisplayTimedTextToPlayer(pl, 0, 0, kGoodNewsDur, GetGoodNewsStringForPlayer(pl))
			DisplayTimedTextToPlayer(pl, 0, 0, kGoodNewsDur, msg)
public function AttentionToForce(string msg, force f)
	for i = 0 to PLAYER_SLOTS - 1
		if GetForceOfPlayer(players[i]) == f
			let pl = players[i]
			DisplayTimedTextToPlayer(pl, 0, 0, kGoodNewsDur, GetAttentionStringForPlayer(pl))
			DisplayTimedTextToPlayer(pl, 0, 0, kGoodNewsDur, msg)


init
	global_timer.startPeriodic(0.01) ->
		elapsed_time += 0.01
				